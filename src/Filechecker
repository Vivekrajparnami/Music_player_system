import java.io.File;
import java.io.IOException;
import java.util.NoSuchElementException;
import java.util.Scanner;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

public class Filechecker {
    private AudioInputStream song;
    private Clip clip;
    private final String path = "C:\\Users\\vivekraj\\Desktop\\Music-Player\\Source-Code\\lib\\";
    private File[] musicFiles;
    private int currentSongIndex = 0;
    private String response = "";

    public Filechecker() throws UnsupportedAudioFileException, IOException, LineUnavailableException, InterruptedException {
        (new ProcessBuilder("cmd", "/c", "cls")).inheritIO().start().waitFor();
        System.out.println("Welcome to the Music Player!");
        System.out.println("   _____   _       _   _             ");
        System.out.println("  / ___| ()     | | (_)            ");
        System.out.println(" | |  __   _    __| |  _   _ __ ___  ");
        System.out.println(" | | |_ | | |  / ` | | | | ' ` _ \\ ");
        System.out.println(" | || | | | | (_| | | | | | | | | |");
        System.out.println("  \\| ||  \\,| || || || |_|");

        Scanner sc = new Scanner(System.in);
        this.musicFiles = new File(this.path).listFiles((dir, name) -> name.toLowerCase().endsWith(".wav"));

        if (this.musicFiles != null && this.musicFiles.length > 0) {
            for (int i = 0; i < this.musicFiles.length; ++i) {
                System.out.println((i + 1) + ". " + this.musicFiles[i].getName());
            }

            System.out.print("Enter the number of the song you want to play (or enter '0' to exit): ");
            int choice = sc.nextInt();

            while (choice < 0 || choice > this.musicFiles.length) {
                System.out.print("Invalid choice. Enter the number of the song you want to play (or enter '0' to exit): ");
                choice = sc.nextInt();
            }

            if (choice != 0) {
                this.currentSongIndex = choice - 1;
                this.playMusic(this.musicFiles[this.currentSongIndex]);
            }
        } else {
            System.out.println("No .wav files found in the directory.");
        }

        sc.close();
    }

    public void playMusic(File musicFile) throws LineUnavailableException, IOException, UnsupportedAudioFileException {
        this.song = AudioSystem.getAudioInputStream(musicFile);
        this.clip = AudioSystem.getClip();
        this.clip.open(this.song);
        this.clip.start();

        Scanner sc = new Scanner(System.in);

        while (!response.equals("Q")) {
            System.out.println("P = Play, Q = Quit, S = Stop, R = Reset, N = Next, B = Previous, C = Choose");
            System.out.print("Enter your response: ");

            try {
                response = sc.next().toUpperCase();
                switch (response) {
                    case "B":
                        this.clip.close();
                        this.currentSongIndex = (this.currentSongIndex - 1 + this.musicFiles.length) % this.musicFiles.length;
                        this.playMusic(this.musicFiles[this.currentSongIndex]);
                        break;
                    case "C":
                        this.clip.close();
                        System.out.print("Enter the number of the song you want to play: ");
                        int choice = sc.nextInt();
                        while (choice <= 0 || choice > this.musicFiles.length) {
                            System.out.print("Invalid choice. Enter the number of the song you want to play: ");
                            choice = sc.nextInt();
                        }
                        this.currentSongIndex = choice - 1;
                        this.playMusic(this.musicFiles[this.currentSongIndex]);
                        break;
                    case "N":
                        this.clip.close();
                        this.currentSongIndex = (this.currentSongIndex + 1) % this.musicFiles.length;
                        this.playMusic(this.musicFiles[this.currentSongIndex]);
                        break;
                    case "P":
                        this.clip.start();
                        break;
                    case "Q":
                        this.clip.close();
                        break;
                    case "R":
                        this.clip.setMicrosecondPosition(0L);
                        this.clip.start();
                        break;
                    case "S":
                        this.clip.stop();
                        break;
                    default:
                        System.out.println("Invalid Response!!!");
                        break;
                }
            } catch (NoSuchElementException ex) {
                System.out.println("Error reading input. Please try again.");
                sc.next();
            }
        }

        System.out.println("Bye-Bye");
        sc.close();
    }

    public static void main(String[] args) {
        try {
            new Filechecker();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
